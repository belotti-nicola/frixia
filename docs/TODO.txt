TODO   
    do API for epollcallbacks
    
    CALLBACKS SIZE IS KNOWN AT compile time known
    valgrind support
    debug level prints
    convoy is shared -> make it threadsafe
    simplify API start
    remove unnecessary elements
    moving any function to the thread_pool might be functional
    http/fins calling
    mallocing convoy to simplify api

ISSUE:
    fifo seems controversial (EPOLLET only)
    thread pool termination is by killing 
    TIMER DIFFERS FROM TCP/UDP/FIFO. CREATE NEW FD STRUCTURE

FEAT:
    logger
    general event creation

FIX:
    search udp/fifo/tcp unique function
    
REFACTORING
    enum UPPERCASES
    name ENGINE_EVENT / PROGRAM_EVENT (1.ENUM 2.START_<t>_EVENT)
    STOPALL: no need to call functions? check
    frixia_fd can be designed better 
    thread pool -> many Q to inject in threads Qs (dispatcher that delivers LOCAL DATA!)
    test -> 1. refactor with common functions (CSV handling) 2. insert header_numbers as test sample
    test::csv with free schema (load data, no DCs)
    pico -> read_headers first.
    setup -> src/setup
    smaller jop pieces (HTTP: read, callback, response)
    HTTP: GET:/foo to search in HashMap is unnecessary (search /foo GET)

CHOICES
    handle mini tasks (HTTP: 1.read 2.decode req 3.do magic 4.reply to client)

FUTURE DEVELOPMENT
    strong type safety for callbacks
    icon
    python integration
    HTTPS (integrabile->2.0.0)
    create library
    use a thread pool library (external)
    design a better policy than round robin for task scheduling
    timer with delay/interval/start_time
    THREAD_POOL
        1. bound_robin
        2. static scheduling
        3. task stealing
    UDP/TCP payload only
    library -> COMPILETIME/RUNTIME CHECKS FOR TYPE SAFETY (LEAVE OUT ALL THE CASTS) 

CHECK
    nothing.
