TODO   
    frixia stop (keep looping?)
    CALLBACKS SIZE IS 128 (compile time known)
    valgrind support
    time triggered epoll
    LIBRARY SETUP SHARED COMPONENTS
    set_fins_echo_server
    debug level prints

ISSUE:
    fifo seems controversial (EPOLLET only)
    thread pool termination is by killing 

FEAT:
    logger
    general event creation

FIX:
    search udp/fifo/tcp unique function
    
REFACTORING
    enum UPPERCASES
    name ENGINE_EVENT / PROGRAM_EVENT (1.ENUM 2.START_<t>_EVENT)
    STOPALL: no need to call functions? check
    frixia_fd can be designed better 
    thread pool -> many Q to inject in threads Qs (dispatcher that delivers LOCAL DATA!)
    test -> 1. refactor with common functions (CSV handling) 2. insert header_numbers as test sample
    test::csv with free schema (load data, no DCs)
    pico -> read_headers first.
    setup -> src/setup
    smaller jop pieces (HTTP: read, callback, response)
    HTTP: GET:/foo to search in HashMap is unnecessary (search /foo GET)

CHOICES
    C vs C++
    handle mini tasks (HTTP: 1.read 2.decode req 3.do magic 4.reply to client)

FUTURE DEVELOPMENT
    icon
    python integration
    HTTPS (integrabile->2.0.0)
    create library
    use a thread pool library (external)
    design a better policy than round robin for task scheduling 

CHECK
    nothing.
